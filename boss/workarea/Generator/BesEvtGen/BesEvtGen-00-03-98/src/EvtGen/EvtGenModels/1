//--------------------------------------------------------------------------
//
// Environment:
//      This software is part of the EvtGen package developed jointly
//      for the BaBar and CLEO collaborations.  If you use all or part
//      of it, please give an appropriate acknowledgement.
//
// Copyright Information: See EvtGen/COPYRIGHT
//      Copyright (C) 1998      Caltech, UCSB
//
// Module: EvtVVSPwave.cc
//
// Description: Routine to decay vector-> vector pi pi where the 
//              decay is S-wave dominated.
//
// Modification history:
//
//    RYD       December 11, 1999       Module created
//
//------------------------------------------------------------------------
// 
#include "EvtGenBase/EvtPatches.hh"
#include <stdlib.h>
#include "EvtGenBase/EvtParticle.hh"
#include "EvtGenBase/EvtGenKine.hh"
#include "EvtGenBase/EvtPDL.hh"
#include "EvtGenBase/EvtVector4C.hh"
#include "EvtGenBase/EvtVector4R.hh"
#include "EvtGenBase/EvtTensor4C.hh"
#include "EvtGenBase/EvtReport.hh"
#include "EvtGenBase/EvtdFunction.hh"
#include "EvtGenBase/EvtComplex.hh"
#include "EvtGenBase/EvtHelSys.hh"
#include "EvtGenModels/EvtT2GV.hh"
#include <string>
using namespace std; //::endl;

EvtT2GV::~EvtT2GV() {}

void EvtT2GV::getName(std::string& model_name){

  model_name="T2GV";     

}


EvtDecayBase* EvtT2GV::clone(){

  return new EvtT2GV;

}

void EvtT2GV::init(){
// check that there are 0 arguments
 checkNArg(0); 
 checkNDaug(2);
 checkSpinParent(EvtSpinType::TENSOR);
 checkSpinDaughter(0,EvtSpinType::PHOTON);
 checkSpinDaughter(1,EvtSpinType::VECTOR);
 }


void EvtT2GV::initProbMax() {

//Hard coded... should not be hard to calculate...
setProbMax(1.001);
}      

void EvtT2GV::decay( EvtParticle *p){
 EvtComplex Am11(1.0,0.0);
 EvtComplex A1m1(1.0,0.0);
 EvtComplex A10(1.0,0.0);  // relative to A10

  p->initializePhaseSpace(getNDaug(),getDaugs());

  EvtParticle *v,*s1;
  EvtVector4R pv,ps,ppr;

  v =p->getDaug(0);  //gamma
  s1=p->getDaug(1); //J/psi
  pv=v->getP4Lab();
  ps=s1->getP4Lab();
  ppr=pv+ps;
//  Put phase space results into the daughters.
  EvtHelSys angles(ppr,pv); //using helicity sys. angles
  double theta =angles.getHelAng(1);
  double ct=cos(theta),st=sqrt(1-ct*ct);
  double d20=0.5*sqrt(1.5)*st*st,d21=-2*pow(ct,3)*st,d22=pow(ct,4),d2m2=pow(st,4),d2m1=-2*ct*pow(st,3);
  double d10=-sqrt(1.5)*ct*st,d11=pow(ct,2)*(2*ct-1),d12=2*pow(ct,3)*st,d1m2=-2*ct*pow(st,3),d1m1=(2*ct+1)*pow(st,2);
  double d00=1./4.*(3*(2*pow(ct,2)-1)+1),d01=-d10,d02=d20,d0m2=d20,d0m1=d10;
  double dm10=-d10,dm11=d1m1,dm12=-d2m1,dm1m2=d21,dm1m1=d11;
  double dm20=d20,dm21=-d21,dm22=d2m2,dm2m2=d22,dm2m1=-d21;
 
 int j1,j2,j3;
 for(j1=0;j1<=4;){
 for(j2=0;j2<=1;){
 for(j3=0;j3<=2;){
 vertex(j1,j2,j3,0.0);j3++;}
j2++;}
j1++;}

cout<<d1m1;
 vertex(4,1,2, d20*A11 );
 vertex(4,1,1, d21 *A10 );
 vertex(4,1,0, d22 *A1m1);
 vertex(4,0,2, d2m2 *A1m1);
 vertex(4,0,1, d2m1 *A10 );
 vertex(4,0,0, d20 *A11 );

 vertex(3,1,2, d10 *A11 );
 vertex(3,1,1, d11 *A10 );
 vertex(3,1,0, d12 *A1m1);
 vertex(3,0,2, d1m2 *A1m1);
// vertex(3,0,1, d1m1 *A10 ); // strange, check it!
 vertex(3,0,0, d10 *A11 ); 

 vertex(2,1,2, d00 *A11 );
 vertex(2,1,1, d01 *A10 );
 vertex(2,1,0, d02 *A1m1);
 vertex(2,0,2, d0m2 *A1m1);
 vertex(2,0,1, d0m1 *A10 );
// vertex(2,0,0, d00 *A11 ); // strange, check it!

 vertex(1,1,2, dm10 *A11 );
 vertex(1,1,1, dm11 *A10 );
 vertex(1,1,0, dm12 *A1m1);
 vertex(1,0,2, dm1m2 *A1m1);
 vertex(1,0,1, dm1m1 *A10 );
 vertex(1,0,0, dm10 *A11 );

 vertex(0,1,2, dm20 *A11 );
 vertex(0,1,1, dm21 *A10 );
 vertex(0,1,0, dm22 *A1m1);
 vertex(0,0,2, dm2m2 *A1m1);
 vertex(0,0,1, dm2m1 *A10 );
 vertex(0,0,0, dm20 *A11 );
 return ;
}



